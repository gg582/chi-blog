package main

import (
	"fmt"
	"log"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"

	"github.com/gg582/chi-blog/blog-backend/handlers" // Import the handlers package
)

func main() {
	r := chi.NewRouter()

	// Middleware setup
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)

	// CORS configuration (needed when frontend and backend domains differ)
	r.Use(func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			w.Header().Set("Access-Control-Allow-Origin", "http://localhost:3000") // Frontend address
			w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
			w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
			w.Header().Set("Access-Control-Allow-Credentials", "true") // If exchanging cookies, etc.
			if r.Method == "OPTIONS" {
				w.WriteHeader(http.StatusOK)
				return
			}
			next.ServeHTTP(w, r)
		})
	})

	// Define API routes using handlers from the handlers package
	r.Get("/api/posts", handlers.GetPostsHandler)
	r.Get("/api/posts/{id}", handlers.GetPostByIDHandler)
	r.Get("/api/about", handlers.GetAboutPageHandler)
	r.Get("/api/contact", handlers.GetContactPageHandler)

	// New Post Endpoint: Now expecting POST request to /api/new-post/
	// The post ID (slug) will be generated by the backend based on the title.
	r.Post("/api/new-post", handlers.CreateNewPostHandler) // Changed from {id} to a simpler /api/new-post

	// If you later integrate file uploads, you might have something like:
	// r.Post("/api/upload-image", handlers.UploadFileHandler)

	port := ":8080"
	fmt.Printf("Server started on port %s...\n", port)
	log.Fatal(http.ListenAndServe(port, r))
}
